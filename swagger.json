{
  "swagger": "2.0",
  "info": {
    "title": "SmartOrder API",
    "description": "The SmartOrder API documentation provides a robust and highly scalable interface for system integration within restaurant and bar environments. Developed according to best practices in RESTful architecture, our API offers clearly defined and documented endpoints, ensuring easy comprehension and utilization by developers.",
    "version": "1.0"
  },
  "paths": {
    "/categories": {
      "post": {
        "tags": [
          "categories"
        ],
        "summary": "Create a new category",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Category created successfully",
            "schema": {
              "$ref": "#/definitions/CategoryResponse"
            }
          },
          "400": {
            "description": "Category already exists"
          }
        }
      },
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "Fetch all categories",
        "description": "",
        "responses": {
          "200": {
            "description": "All categories fetch successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CategoryResponse"
              }
            }
          }
        }
      }
    },
    "/categories/{categoryId}": {
      "get": {
        "tags": ["categories"],
        "summary": "Get category by ID",
        "description": "Retrieve a specific category by its ID",
        "parameters": [{
          "name": "categoryId",
          "in": "path",
          "description": "ID of the category to retrieve",
          "required": true,
          "type": "string",
          "format": "uuid"
        }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/CategoryResponse"
            }
          },
          "404": {
            "description": "Category not found"
          }
        }
      },
      "put": {
        "tags": [
          "categories"
        ],
        "summary": "Update category",
        "description": "",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of the category to update",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Category data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "New name of the category"
                },
                "emoji": {
                  "type": "string",
                  "description": "New emoji representing the category"
                }
              }
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "schema": {
              "$ref": "#/definitions/CategoryResponse"
            }
          },
          "404": {
            "description": "Category not found"
          }
        }
      },
      "delete": {
        "tags": ["categories"],
        "summary": "Delete category",
        "description": "",
        "parameters": [{
          "name": "categoryId",
          "in": "path",
          "description": "ID of the category to delete",
          "required": true,
          "type": "string",
          "format": "uuid"
        }],
        "responses": {
          "204": {
            "description": "Category deleted successfully"
          },
          "404": {
            "description": "Category not found"
          }
        }
      }
    },
    "/products": {
      "post": {
        "tags": [
          "products"
        ],
        "summary": "Create a new product",
        "description": "",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "name",
            "description": "Product name",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "description",
            "description": "Product description",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "priceInCents",
            "description": "Product price in cents",
            "required": true,
            "type": "number"
          },
          {
            "in": "formData",
            "name": "categoryId",
            "description": "Product category ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "formData",
            "name": "ingredients",
            "description": "Stringified array of object containing ingredientId: id",
            "required": false,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "image",
            "description": "Product image to upload",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "Product created successfully",
            "schema": {
              "$ref": "#/definitions/ProductResponse"
            }
          },
          "400": {
            "description": "Invalid data provided"
          }
        }
      },
      "get": {
        "tags": [
          "products"
        ],
        "summary": "List all products",
        "description": "Retrieve a list of all available products",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductResponse"
              }
            }
          },
          "404": {
            "description": "No products found"
          }
        }
      }
    },
    "/categories/{categoryId}/products": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "List products by category",
        "description": "Retrieve a list of products belonging to a specific category",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of the category",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductResponse"
              }
            }
          },
          "404": {
            "description": "No products found for the specified category"
          }
        }
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": ["products"],
        "summary": "Get product by ID",
        "description": "Retrieve a specific product by its ID",
        "parameters": [{
          "name": "productId",
          "in": "path",
          "description": "ID of the product to retrieve",
          "required": true,
          "type": "string",
          "format": "uuid"
        }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/ProductResponse"
            }
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "put": {
        "tags": ["products"],
        "summary": "Update product",
        "description": "Update a specific product",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of the product to update",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "formData",
            "name": "name",
            "description": "New name of the product",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "description",
            "description": "New description of the product",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "priceInCents",
            "description": "New price of the product in cents",
            "required": true,
            "type": "number"
          },
          {
            "in": "formData",
            "name": "categoryId",
            "description": "New category ID of the product",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "formData",
            "name": "ingredients",
            "description": "New ingredients of the product (optional)",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "image",
            "description": "New image of the product to upload",
            "required": false,
            "type": "file"
          }
        ],
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "schema": {
              "$ref": "#/definitions/ProductResponse"
            }
          },
          "400": {
            "description": "Invalid data provided"
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "delete": {
        "tags": ["products"],
        "summary": "Delete product",
        "description": "Delete a specific product",
        "parameters": [{
          "name": "productId",
          "in": "path",
          "description": "ID of the product to delete",
          "required": true,
          "type": "string",
          "format": "uuid"
        }],
        "responses": {
          "204": {
            "description": "Product deleted successfully"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },

    "/orders": {
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "Create a new order",
        "description": "Create a new order for a table with a list of products",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Order data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrderRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Order created successfully",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid data provided"
          }
        }
      },
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "List all orders",
        "description": "Retrieve a list of all orders",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          },
          "404": {
            "description": "No orders found"
          }
        }
      }
    },
    "/orders/{orderId}/status": {
      "patch": {
        "tags": [
          "orders"
        ],
        "summary": "Update order status",
        "description": "Update the status of a specific order",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Updated status data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateOrderStatusRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Order status updated successfully"
          },
          "400": {
            "description": "Invalid data provided"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/orders/{orderId}/cancel": {
      "delete": {
        "tags": [
          "orders"
        ],
        "summary": "Cancel order",
        "description": "Cancel a specific order",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "Order canceled successfully"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/ingredients": {
      "post": {
        "tags": [
          "ingredients"
        ],
        "summary": "Create a new ingredient",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Ingredient data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the ingredient"
                },
                "emoji": {
                  "type": "string",
                  "description": "Emoji representing the ingredient"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Ingredient created successfully",
            "schema": {
              "$ref": "#/definitions/IngredientResponse"
            }
          },
          "400": {
            "description": "Invalid data provided"
          }
        }
      },
      "get": {
        "tags": [
          "ingredients"
        ],
        "summary": "List all ingredients",
        "description": "Retrieve a list of all available ingredients",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IngredientResponse"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CategoryRequest": {
      "type": "object",
      "properties": {
        "emoji": {
          "type": "string",
          "description": "Emoji used as category icon",
          "example": "🍕"
        },
        "name": {
          "type": "string",
          "description": "Category name",
          "example": "Pizzas"
        }
      }
    },
    "CategoryResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Category ID",
          "format": "uuid"
        },
        "emoji": {
          "type": "string",
          "description": "Emoji used as category icon",
          "example": "🍕"
        },
        "name": {
          "type": "string",
          "description": "Category name",
          "example": "Pizzas"
        }
      }
    },
    "ProductRequest": {
      "type": "object",
      "properties": {
        "image": {
          "type": "string",
          "format": "binary"
        }
      }
    },
    "ProductResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Product ID",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "description": "Product name"
        },
        "description": {
          "type": "string",
          "description": "Product description"
        },
        "priceInCents": {
          "type": "integer",
          "description": "Price of the product in cents",
          "format": "int32"
        },
        "ingredients": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "ingredient": {
                "type": "object",
                "properties": {
                  "emoji": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "description": "Ingredients of the product"
        },
        "category": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Category name"
            },
            "emoji": {
              "type": "string",
              "description": "Emoji used as category icon"
            }
          },
          "description": "Product category details"
        }
      }
    },
    "OrderRequest": {
      "type": "object",
      "properties": {
        "table": {
          "type": "integer",
          "description": "Table number",
          "format": "int32"
        },
        "products": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "productId": {
                "type": "string",
                "description": "ID of the product",
                "format": "uuid"
              },
              "quantity": {
                "type": "integer",
                "description": "Quantity of the product",
                "format": "int32"
              }
            }
          },
          "description": "List of products with their IDs and quantities"
        }
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Order ID",
          "format": "uuid"
        },
        "table": {
          "type": "integer",
          "description": "Table number",
          "format": "int32"
        },
        "status": {
          "type": "string",
          "description": "Order status",
          "enum": [
            "WAITING",
            "IN_PRODUCTION",
            "DONE"
          ]
        },
        "createdAt": {
          "type": "string",
          "description": "Date and time when the order was created",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Date and time when the order was last updated",
          "format": "date-time"
        },
        "products": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Product ID",
                "format": "uuid"
              },
              "name": {
                "type": "string",
                "description": "Product name"
              },
              "description": {
                "type": "string",
                "description": "Product description"
              },
              "imagePath": {
                "type": "string",
                "description": "Path to the product image"
              },
              "priceInCents": {
                "type": "integer",
                "description": "Price of the product in cents",
                "format": "int32"
              },
              "categoryId": {
                "type": "string",
                "description": "ID of the category to which the product belongs",
                "format": "uuid"
              }
            }
          },
          "description": "List of products included in the order"
        }
      }
    },
    "UpdateOrderStatusRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "Updated status of the order",
          "enum": [
            "WAITING",
            "IN_PRODUCTION",
            "DONE"
          ]
        }
      }
    },
    "IngredientResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the ingredient",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "description": "Name of the ingredient"
        },
        "emoji": {
          "type": "string",
          "description": "Emoji representing the ingredient"
        }
      }
    }
  }
}
